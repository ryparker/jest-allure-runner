diff --git a/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts b/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts
index 657f1cc..eacd8f3 100644
--- a/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts
+++ b/node_modules/jest-jasmine2/build/ExpectationFailed.d.ts
@@ -4,5 +4,4 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-export default class ExpectationFailed extends Error {
-}
+export default class ExpectationFailed extends Error {}
diff --git a/node_modules/jest-jasmine2/build/PCancelable.d.ts b/node_modules/jest-jasmine2/build/PCancelable.d.ts
new file mode 100644
index 0000000..7379192
--- /dev/null
+++ b/node_modules/jest-jasmine2/build/PCancelable.d.ts
@@ -0,0 +1,37 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+export default class PCancelable<T> extends Promise<T> {
+  private _pending;
+  private _canceled;
+  private _promise;
+  private _cancel?;
+  private _reject;
+  constructor(
+    executor: (
+      onCancel: (cancelHandler: () => void) => void,
+      resolve: (value?: T | PromiseLike<T>) => void,
+      reject: (reason?: unknown) => void,
+    ) => void,
+  );
+  then<TResult1 = T, TResult2 = never>(
+    onFulfilled?:
+      | ((value: T) => TResult1 | PromiseLike<TResult1>)
+      | undefined
+      | null,
+    onRejected?:
+      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
+      | undefined
+      | null,
+  ): Promise<TResult1 | TResult2>;
+  catch<TResult>(
+    onRejected?:
+      | ((reason: any) => TResult | PromiseLike<TResult>)
+      | undefined
+      | null,
+  ): Promise<T | TResult>;
+  cancel(): void;
+}
diff --git a/node_modules/jest-jasmine2/build/PCancelable.js b/node_modules/jest-jasmine2/build/PCancelable.js
index 31cca71..6536099 100644
--- a/node_modules/jest-jasmine2/build/PCancelable.js
+++ b/node_modules/jest-jasmine2/build/PCancelable.js
@@ -1,15 +1,33 @@
-/**
- * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
 'use strict';
 
+Object.defineProperty(exports, '__esModule', {
+  value: true
+});
+exports.default = void 0;
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var Promise = global[Symbol.for('jest-native-promise')] || global.Promise;
 
+function _defineProperty(obj, key, value) {
+  if (key in obj) {
+    Object.defineProperty(obj, key, {
+      value: value,
+      enumerable: true,
+      configurable: true,
+      writable: true
+    });
+  } else {
+    obj[key] = value;
+  }
+  return obj;
+}
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
 class CancelError extends Error {
   constructor() {
     super('Promise was canceled');
@@ -17,20 +35,20 @@ class CancelError extends Error {
   }
 }
 
-class PCancelable {
-  static fn(fn) {
-    return function () {
-      const args = [].slice.apply(arguments);
-      return new PCancelable((onCancel, resolve, reject) => {
-        args.unshift(onCancel);
-        fn.apply(null, args).then(resolve, reject);
-      });
-    };
-  }
-
+class PCancelable extends Promise {
   constructor(executor) {
-    this._pending = true;
-    this._canceled = false;
+    super(resolve => resolve());
+
+    _defineProperty(this, '_pending', true);
+
+    _defineProperty(this, '_canceled', false);
+
+    _defineProperty(this, '_promise', void 0);
+
+    _defineProperty(this, '_cancel', void 0);
+
+    _defineProperty(this, '_reject', () => {});
+
     this._promise = new Promise((resolve, reject) => {
       this._reject = reject;
       return executor(
@@ -49,12 +67,12 @@ class PCancelable {
     });
   }
 
-  then() {
-    return this._promise.then.apply(this._promise, arguments);
+  then(onFulfilled, onRejected) {
+    return this._promise.then(onFulfilled, onRejected);
   }
 
-  catch() {
-    return this._promise.catch.apply(this._promise, arguments);
+  catch(onRejected) {
+    return this._promise.catch(onRejected);
   }
 
   cancel() {
@@ -74,12 +92,6 @@ class PCancelable {
 
     this._reject(new CancelError());
   }
-
-  get canceled() {
-    return this._canceled;
-  }
 }
 
-Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);
-module.exports = PCancelable;
-module.exports.CancelError = CancelError;
+exports.default = PCancelable;
diff --git a/node_modules/jest-jasmine2/build/index.js b/node_modules/jest-jasmine2/build/index.js
index 7aa8408..770a1a0 100644
--- a/node_modules/jest-jasmine2/build/index.js
+++ b/node_modules/jest-jasmine2/build/index.js
@@ -69,7 +69,7 @@ function _interopRequireWildcard(obj) {
 const JASMINE = require.resolve('./jasmine/jasmineLight');
 
 async function jasmine2(globalConfig, config, environment, runtime, testPath) {
-  var _runtime$unstable_sho2;
+  var _config$testNamePatte, _runtime$unstable_sho2;
 
   const reporter = new _reporter.default(globalConfig, config, testPath);
   const jasmineFactory = runtime.requireInternalModule(JASMINE);
@@ -212,8 +212,16 @@ async function jasmine2(globalConfig, config, environment, runtime, testPath) {
         globalConfig.enabledTestsMap[spec.result.testPath];
       return (suiteMap && suiteMap[spec.result.fullName]) || false;
     };
-  } else if (globalConfig.testNamePattern) {
-    const testNameRegex = new RegExp(globalConfig.testNamePattern, 'i');
+  }
+
+  const testNamePattern =
+    (_config$testNamePatte = config.testNamePattern) !== null &&
+    _config$testNamePatte !== void 0
+      ? _config$testNamePatte
+      : globalConfig.testNamePattern;
+
+  if (testNamePattern) {
+    const testNameRegex = new RegExp(testNamePattern, 'i');
 
     env.specFilter = spec => testNameRegex.test(spec.getFullName());
   } // TODO: remove ? in Jest 26
diff --git a/node_modules/jest-jasmine2/build/jasmine/CallTracker.d.ts b/node_modules/jest-jasmine2/build/jasmine/CallTracker.d.ts
index 1692e9c..be35903 100644
--- a/node_modules/jest-jasmine2/build/jasmine/CallTracker.d.ts
+++ b/node_modules/jest-jasmine2/build/jasmine/CallTracker.d.ts
@@ -6,20 +6,20 @@
  *
  */
 export declare type Context = {
-    object: unknown;
-    args: Array<unknown>;
-    returnValue?: unknown;
+  object: unknown;
+  args: Array<unknown>;
+  returnValue?: unknown;
 };
 declare class CallTracker {
-    track: (context: Context) => void;
-    any: () => boolean;
-    count: () => number;
-    argsFor: (index: number) => Array<unknown>;
-    all: () => Array<Context>;
-    allArgs: () => Array<unknown>;
-    first: () => Context;
-    mostRecent: () => Context;
-    reset: () => void;
-    constructor();
+  track: (context: Context) => void;
+  any: () => boolean;
+  count: () => number;
+  argsFor: (index: number) => Array<unknown>;
+  all: () => Array<Context>;
+  allArgs: () => Array<unknown>;
+  first: () => Context;
+  mostRecent: () => Context;
+  reset: () => void;
+  constructor();
 }
 export default CallTracker;
diff --git a/node_modules/jest-jasmine2/build/jasmine/Env.d.ts b/node_modules/jest-jasmine2/build/jasmine/Env.d.ts
index 83a0388..2e808cf 100644
--- a/node_modules/jest-jasmine2/build/jasmine/Env.d.ts
+++ b/node_modules/jest-jasmine2/build/jasmine/Env.d.ts
@@ -6,11 +6,11 @@
  *
  */
 import { QueueableFn } from '../queueRunner';
-import type { AssertionErrorWithStack, Jasmine, Reporter, Spy } from '../types';
+import type { AssertionErrorWithStack, Jasmine, Reporter, SpecDefinitionsFn, Spy } from '../types';
 import type { default as Spec } from './Spec';
 import type Suite from './Suite';
 export default function (j$: Jasmine): {
-    new (_options?: object | undefined): {
+    new (_options?: Record<string, unknown> | undefined): {
         specFilter: (spec: Spec) => boolean;
         catchExceptions: (value: unknown) => boolean;
         throwOnExpectationFailure: (value: unknown) => void;
@@ -25,19 +25,19 @@ export default function (j$: Jasmine): {
         randomTests: () => boolean;
         seed: (value: unknown) => unknown;
         execute: (runnablesToRun?: string[] | undefined, suiteTree?: Suite | undefined) => Promise<void>;
-        fdescribe: (description: string, specDefinitions: Function) => Suite;
-        spyOn: (obj: Record<string, Spy>, methodName: string, accessType?: "get" | "set" | "configurable" | "enumerable" | "value" | "writable" | undefined) => Spy;
+        fdescribe: (description: string, specDefinitions: SpecDefinitionsFn) => Suite;
+        spyOn: (obj: Record<string, Spy>, methodName: string, accessType?: "configurable" | "enumerable" | "value" | "writable" | "get" | "set" | undefined) => Spy;
         beforeEach: (beforeEachFunction: QueueableFn['fn'], timeout?: number | undefined) => void;
         afterEach: (afterEachFunction: QueueableFn['fn'], timeout?: number | undefined) => void;
         clearReporters: () => void;
         addReporter: (reporterToAdd: Reporter) => void;
         it: (description: string, fn: QueueableFn['fn'], timeout?: number | undefined) => Spec;
-        xdescribe: (description: string, specDefinitions: Function) => Suite;
+        xdescribe: (description: string, specDefinitions: SpecDefinitionsFn) => Suite;
         xit: (description: string, fn: QueueableFn['fn'], timeout?: number | undefined) => Spec;
         beforeAll: (beforeAllFunction: QueueableFn['fn'], timeout?: number | undefined) => void;
         todo: () => Spec;
         provideFallbackReporter: (reporterToAdd: Reporter) => void;
         allowRespy: (allow: boolean) => void;
-        describe: (description: string, specDefinitions: Function) => Suite;
+        describe: (description: string, specDefinitions: SpecDefinitionsFn) => Suite;
     };
 };
diff --git a/node_modules/jest-jasmine2/build/jasmine/Env.js b/node_modules/jest-jasmine2/build/jasmine/Env.js
index 484e3a0..6028ad7 100644
--- a/node_modules/jest-jasmine2/build/jasmine/Env.js
+++ b/node_modules/jest-jasmine2/build/jasmine/Env.js
@@ -438,7 +438,7 @@ function _default(j$) {
           parentSuite.addChild(suite);
           currentDeclarationSuite = suite;
           let declarationError = undefined;
-          let describeReturnValue = undefined;
+          let describeReturnValue;
 
           try {
             describeReturnValue = specDefinitions.call(suite);
diff --git a/node_modules/jest-jasmine2/build/jasmine/Spec.d.ts b/node_modules/jest-jasmine2/build/jasmine/Spec.d.ts
index 1b8ed45..43bddc3 100644
--- a/node_modules/jest-jasmine2/build/jasmine/Spec.d.ts
+++ b/node_modules/jest-jasmine2/build/jasmine/Spec.d.ts
@@ -67,14 +67,14 @@ export default class Spec {
     static isPendingSpecException(e: Error): boolean;
     constructor(attrs: Attributes);
     addExpectationResult(passed: boolean, data: ExpectationResultFactoryOptions, isError?: boolean): void;
-    execute(onComplete: Function, enabled: boolean): void;
+    execute(onComplete?: () => void, enabled?: boolean): void;
     cancel(): void;
     onException(error: ExpectationFailed | AssertionErrorWithStack): void;
     disable(): void;
     pend(message?: string): void;
     todo(): void;
     getResult(): SpecResult;
-    status(enabled?: boolean): "todo" | "passed" | "failed" | "pending" | "disabled";
+    status(enabled?: boolean): "passed" | "failed" | "pending" | "todo" | "disabled";
     isExecutable(): boolean;
     getFullName(): string;
     isAssertionError(error: Error): boolean;
diff --git a/node_modules/jest-jasmine2/build/jasmine/SpyStrategy.d.ts b/node_modules/jest-jasmine2/build/jasmine/SpyStrategy.d.ts
index a54754d..fa4477b 100644
--- a/node_modules/jest-jasmine2/build/jasmine/SpyStrategy.d.ts
+++ b/node_modules/jest-jasmine2/build/jasmine/SpyStrategy.d.ts
@@ -6,17 +6,21 @@
  *
  */
 export default class SpyStrategy {
-    identity: () => string;
-    exec: (...args: Array<any>) => unknown;
-    callThrough: () => unknown;
-    returnValue: (value: unknown) => unknown;
-    returnValues: () => unknown;
-    throwError: (something: string | Error) => unknown;
-    callFake: (fn: Function) => unknown;
-    stub: (fn: Function) => unknown;
-    constructor({ name, fn, getSpy, }?: {
-        name?: string;
-        fn?: Function;
-        getSpy?: () => unknown;
-    });
+  identity: () => string;
+  exec: (...args: Array<any>) => unknown;
+  callThrough: () => unknown;
+  returnValue: (value: unknown) => unknown;
+  returnValues: () => unknown;
+  throwError: (something: string | Error) => unknown;
+  callFake: (fn: Function) => unknown;
+  stub: (fn: Function) => unknown;
+  constructor({
+    name,
+    fn,
+    getSpy,
+  }?: {
+    name?: string;
+    fn?: Function;
+    getSpy?: () => unknown;
+  });
 }
diff --git a/node_modules/jest-jasmine2/build/jasmine/Timer.d.ts b/node_modules/jest-jasmine2/build/jasmine/Timer.d.ts
index 17c97e6..a4ff812 100644
--- a/node_modules/jest-jasmine2/build/jasmine/Timer.d.ts
+++ b/node_modules/jest-jasmine2/build/jasmine/Timer.d.ts
@@ -6,9 +6,7 @@
  *
  */
 export default class Timer {
-    start: () => void;
-    elapsed: () => number;
-    constructor(options?: {
-        now?: () => number;
-    });
+  start: () => void;
+  elapsed: () => number;
+  constructor(options?: {now?: () => number});
 }
diff --git a/node_modules/jest-jasmine2/build/jasmine/jasmineLight.d.ts b/node_modules/jest-jasmine2/build/jasmine/jasmineLight.d.ts
index 649a15a..ad4fe02 100644
--- a/node_modules/jest-jasmine2/build/jasmine/jasmineLight.d.ts
+++ b/node_modules/jest-jasmine2/build/jasmine/jasmineLight.d.ts
@@ -5,13 +5,13 @@
  * LICENSE file in the root directory of this source tree.
  *
  */
-import type { Jasmine } from '../types';
+import type { Jasmine, SpecDefinitionsFn } from '../types';
 import JsApiReporter from './JsApiReporter';
 export declare const create: (createOptions: Record<string, any>) => Jasmine;
 export declare const _interface: (jasmine: Jasmine, env: any) => {
-    describe(description: string, specDefinitions: Function): any;
-    xdescribe(description: string, specDefinitions: Function): any;
-    fdescribe(description: string, specDefinitions: Function): any;
+    describe(description: string, specDefinitions: SpecDefinitionsFn): any;
+    xdescribe(description: string, specDefinitions: SpecDefinitionsFn): any;
+    fdescribe(description: string, specDefinitions: SpecDefinitionsFn): any;
     it(): any;
     xit(): any;
     fit(): any;
diff --git a/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js b/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js
index 27b4c31..8cad3ac 100644
--- a/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js
+++ b/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js
@@ -25,9 +25,14 @@ function isPromise(obj) {
   return obj && typeof obj.then === 'function';
 }
 
+const doneFnNoop = () => {};
+
+doneFnNoop.fail = () => {};
+
 function promisifyLifeCycleFunction(originalFn, env) {
   return function (fn, timeout) {
     if (!fn) {
+      // @ts-expect-error: missing fn arg is handled by originalFn
       return originalFn.call(env);
     }
 
@@ -50,7 +55,7 @@ function promisifyLifeCycleFunction(originalFn, env) {
       const wrappedFn = (0, _isGeneratorFn.default)(fn)
         ? _co.default.wrap(fn)
         : fn;
-      const returnValue = wrappedFn.call({});
+      const returnValue = wrappedFn.call({}, doneFnNoop);
 
       if (isPromise(returnValue)) {
         returnValue.then(done.bind(null, null), error => {
@@ -75,6 +80,7 @@ function promisifyLifeCycleFunction(originalFn, env) {
 function promisifyIt(originalFn, env, jasmine) {
   return function (specName, fn, timeout) {
     if (!fn) {
+      // @ts-expect-error: missing fn arg is handled by originalFn
       const spec = originalFn.call(env, specName);
       spec.pend('not implemented');
       return spec;
@@ -97,7 +103,7 @@ function promisifyIt(originalFn, env, jasmine) {
       const wrappedFn = (0, _isGeneratorFn.default)(fn)
         ? _co.default.wrap(fn)
         : fn;
-      const returnValue = wrappedFn.call({});
+      const returnValue = wrappedFn.call({}, doneFnNoop);
 
       if (isPromise(returnValue)) {
         returnValue.then(done.bind(null, null), error => {
diff --git a/node_modules/jest-jasmine2/build/pTimeout.d.ts b/node_modules/jest-jasmine2/build/pTimeout.d.ts
index 35eb082..d42c538 100644
--- a/node_modules/jest-jasmine2/build/pTimeout.d.ts
+++ b/node_modules/jest-jasmine2/build/pTimeout.d.ts
@@ -4,4 +4,10 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-export default function pTimeout(promise: Promise<any>, ms: number, clearTimeout: NodeJS.Global['clearTimeout'], setTimeout: NodeJS.Global['setTimeout'], onTimeout: () => any): Promise<any>;
+export default function pTimeout(
+  promise: Promise<void>,
+  ms: number,
+  clearTimeout: NodeJS.Global['clearTimeout'],
+  setTimeout: NodeJS.Global['setTimeout'],
+  onTimeout: () => void,
+): Promise<void>;
diff --git a/node_modules/jest-jasmine2/build/queueRunner.d.ts b/node_modules/jest-jasmine2/build/queueRunner.d.ts
index 9c60f33..8335666 100644
--- a/node_modules/jest-jasmine2/build/queueRunner.d.ts
+++ b/node_modules/jest-jasmine2/build/queueRunner.d.ts
@@ -13,14 +13,18 @@ export declare type Options = {
     setTimeout: Global['setTimeout'];
     userContext: any;
 };
+export interface DoneFn {
+    (error?: any): void;
+    fail: (error: Error) => void;
+}
 export declare type QueueableFn = {
-    fn: (done: (error?: any) => void) => void;
+    fn: (done: DoneFn) => void;
     timeout?: () => number;
     initError?: Error;
 };
-export default function queueRunner(options: Options): {
-    cancel: any;
-    catch: <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<void | TResult>;
-    then: <TResult1 = void, TResult2 = never>(onfulfilled?: ((value: void) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
+declare type PromiseCallback = (() => void | PromiseLike<void>) | undefined | null;
+export default function queueRunner(options: Options): PromiseLike<void> & {
+    cancel: () => void;
+    catch: (onRejected?: PromiseCallback) => Promise<void>;
 };
 export {};
diff --git a/node_modules/jest-jasmine2/build/queueRunner.js b/node_modules/jest-jasmine2/build/queueRunner.js
index 9b54475..1c1f3e0 100644
--- a/node_modules/jest-jasmine2/build/queueRunner.js
+++ b/node_modules/jest-jasmine2/build/queueRunner.js
@@ -19,8 +19,6 @@ var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var Promise = global[Symbol.for('jest-native-promise')] || global.Promise;
 
-// har to type :(
-// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
 function queueRunner(options) {
   const token = new _PCancelable.default((onCancel, resolve) => {
     onCancel(resolve);
diff --git a/node_modules/jest-jasmine2/build/types.d.ts b/node_modules/jest-jasmine2/build/types.d.ts
index f1b0508..89f1997 100644
--- a/node_modules/jest-jasmine2/build/types.d.ts
+++ b/node_modules/jest-jasmine2/build/types.d.ts
@@ -18,6 +18,7 @@ import type SpyRegistry from './jasmine/spyRegistry';
 import type { default as Suite, SuiteResult } from './jasmine/Suite';
 import type SpyStrategy from './jasmine/SpyStrategy';
 import type CallTracker from './jasmine/CallTracker';
+export declare type SpecDefinitionsFn = () => void;
 export interface AssertionErrorWithStack extends AssertionError {
     stack: string;
 }
@@ -46,11 +47,19 @@ export interface Spy extends Record<string, any> {
     calls: CallTracker;
     restoreObjectToOriginalState?: () => void;
 }
+declare type JasmineMatcher = {
+    (matchersUtil: unknown, context: unknown): JasmineMatcher;
+    compare: () => RawMatcherFn;
+    negativeCompare: () => RawMatcherFn;
+};
+export declare type JasmineMatchersObject = {
+    [id: string]: JasmineMatcher;
+};
 export declare type Jasmine = {
     _DEFAULT_TIMEOUT_INTERVAL: number;
     DEFAULT_TIMEOUT_INTERVAL: number;
     currentEnv_: ReturnType<typeof Env>['prototype'];
-    getEnv: (options?: object) => ReturnType<typeof Env>['prototype'];
+    getEnv: (options?: Record<string, unknown>) => ReturnType<typeof Env>['prototype'];
     createSpy: typeof createSpy;
     Env: ReturnType<typeof Env>;
     JsApiReporter: typeof JsApiReporter;
@@ -61,7 +70,7 @@ export declare type Jasmine = {
     Timer: typeof Timer;
     version: string;
     testPath: Config.Path;
-    addMatchers: Function;
+    addMatchers: (matchers: JasmineMatchersObject) => void;
 } & typeof expect & NodeJS.Global;
 declare global {
     module NodeJS {
@@ -70,3 +79,4 @@ declare global {
         }
     }
 }
+export {};
