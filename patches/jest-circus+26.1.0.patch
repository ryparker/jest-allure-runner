diff --git a/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js b/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js
index 7c0a2c5..9229f2e 100644
--- a/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js
+++ b/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js
@@ -45,6 +45,8 @@ const initialize = async ({
   parentProcess,
   testPath
 }) => {
+  var _config$testNamePatte;
+
   if (globalConfig.testTimeout) {
     (0, _state.getState)().testTimeout = globalConfig.testTimeout;
   }
@@ -61,7 +63,7 @@ const initialize = async ({
   nodeGlobal.test.concurrent = (test => {
     const concurrent = (testName, testFn, timeout) => {
       // For concurrent tests we first run the function that returns promise, and then register a
-      // nomral test that will be waiting on the returned promise (when we start the test, the promise
+      // normal test that will be waiting on the returned promise (when we start the test, the promise
       // will already be in the process of execution).
       // Unfortunately at this stage there's no way to know if there are any `.only` tests in the suite
       // that will result in this test to be skipped, so we'll be executing the promise function anyway,
@@ -89,7 +91,11 @@ const initialize = async ({
   await (0, _state.dispatch)({
     name: 'setup',
     parentProcess,
-    testNamePattern: globalConfig.testNamePattern
+    testNamePattern:
+      (_config$testNamePatte = config.testNamePattern) !== null &&
+      _config$testNamePatte !== void 0
+        ? _config$testNamePatte
+        : globalConfig.testNamePattern
   });
 
   if (config.testLocationInResults) {
